<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="projects-page.xsl"?>
<projects>
    <project entry="oscal-styler">
        <name>OSCAL Styler</name>
        <line>XSLT like it's 1999</line>
        <description>
            <p>This is a <q>fiddle</q> application permitting users to provide and edit XSLT 1.0 and CSS, and apply it in the browser to OSCAL that they also provide themselves. This can be useful for demonstration, testing, learning and exploration. (Some prior XSLT experience is assumed.)</p>
        </description>
    </project>
    <project entry="oscal-styler/painter.html">
        <name>OSCAL Painter</name>
        <line>Less lines, more color</line>
        <description>
            <p>A reduced version of the <b>OSCAL Styler</b> with a hard-coded transformation (XSLT) showing an OSCAL-alike 'boilerplate' in the HTML result, i.e. given only enough transformation to be visible in the DOM and addressable by CSS.</p>
            <p>The approach to here takes inspiration from <a class="external" href="https://dcl.ils.indiana.edu/teibp/">TEI Boilerplate</a>. See <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Components/Using_custom_elements" class="external">Mozilla Developer Network</a> on custom HTML elements.</p>
        </description>
    </project>
    <project entry="sts-viewer">
        <name>NISO STS Viewer</name>
        <line>Preview your NISO STS document</line>
        <description>
            <p>NISO STS is an XML-based documentary format being adopted at NIST and more widely as an interchange format supporting the publication, exchange, re-use and sustainable (accessible) archiving of documentation relating to standards and guidelines. As a documentary format it is both richer and more rigorous than HTML.</p>
            <p>Use this Previewer to see how a NISO STS-tagged document <i>might</i> appear in display (that is, in your browser, cast dynamically from its source tagging).</p>
        </description>
    </project>
    <project entry="sts-viewer/checker.html">
        <name>STS Checker</name>
        <line>How does the STS submission look?</line>
        <description>
            <p>An XSLT shows an analytical view of an STS document. Using the <a href="sts-viewer">previewer</a> as a basis, this application provides several views useful for assessing the tagging - its nature and quality - of an STS or JATS/BITS document.</p>
        </description>
    </project>
    <project entry="html-reducer">
        <name>HTML Reducer</name>
        <line>Get your Markdown here</line>
        <description>
            <p>Sanitizes and strips HTML down into a markdown-friendly subset, displaying the result. You can save the resulting cleaned-up HTML or a Markdown rendition, or both.</p>
            <p>This application can be used either to scrub down HTML or to evaluate it for such scrubbing by checking to see what comes through.</p>
            <p>At time of writing, this is experimental and needs testing, but demonstrates the principle.</p>
        </description>
    </project>
    <project entry="xproc-visualizer">
        <name>XProc Visualizer (alpha)</name>
        <line>XProc 1.0 as a Mermaid flowchart</line>
        <description>
            <p>On this page a transformation converts XProc into <a href="https://mermaid.js.org/syntax/flowchart.html">Mermaid Flowchart Syntax</a> and makes it available for converting live into a graphic, using Mermaid.</p>
            <p>Under development and still pretty rudimentary.</p>
        </description>
    </project>
    <project entry="directory.xml">
        <name>Reflection</name>
        <line>XML served up crude</line>
        <description>
            <p>The (same) directory to demonstrations on this site, loaded into your browser as XML.</p>
            <p><i>View Source</i> to see the XML source from which the page is produced. In display it looks the same, in this case by design.</p>
            <p>In addition to clean project descriptions, the directory provides a control point for top-level site navigation.</p>
            <p>Don't expect much from the demonstration: the point is that the page looks and works the same. But it is also a test of your browser's support of XML with stylesheets (straight-up XML source) rather than HTML with scripting (capable of delivering XML transformed into HTML).</p>
        </description>
    </project>
    <project entry="index.html">
        <name>Portal Page (dynamic index)</name>
        <description>
            <p>Currently serving as the <q>front page</q> for the demo site, this page permits
                the user to initiate loading the directory, thereby testing the infrastructure while providing these links. For display, the same XSLT is applied as for <a href="directory.xml">the directory acquired as XML</a>.</p>
        </description>
    </project>
    <project status="planned">
        <name>XSLT 1.0-based Schematron-alike</name>
        <line>Design and test your own rules in your own browser</line>
        <description>
            <p>Design your Schematron or a close analog: with this utility and end-user can to compose new rules (using XPath 1.0) and apply them to their own data, without exposure.</p>
            <p>Not quite a Schematron editor so much as a workbench - although supporting actual Schematron and writing out (saving as) Schematron would be a nice-to-have.</p>
            <p>This could be nice to have in rudimentary form even if not actual ISO Schematron.</p>
        </description>
    </project>
    <project status="planned">
        <name>OSCAL to STS conversion</name>
        <line>You have OSCAL, you want STS</line>
        <description>
            <p>We have XSLT 3.0 that can do this: a SaxonJS demo on OSCAL Tools?</p>
        </description>
    </project>
    <project status="planned">
        <name>XSLT Security Awareness</name>
        <line>XSLT, what could go wrong? Risk assessment guidelines and helper application</line>
        <description>
            <p>For more on this topic as it applies to this site, see the <a href="https://github.com/usnistgov/xslt-blender/wiki/Assessment">Assessment</a> page on the project wiki.</p>
            
        </description>
        <tldr summary="An XSLT 1.0 Linter, and then some">
            <p>A transformation offered from a page can help expose and highlight known risks associated with XSLT and the XML-based systems that support them (parser ecosystem etc.) An XSLT loaded by the user can be run through an XSLT, to query and report back on calls and dependencies through static analysis, including (more ideas please) <code>xsl:import</code>, <code>xsl:include</code>, <code>document()</code>, parameter usage etc. - as findings of potential application security vulnerabilities. This could include fine points such as use of <code>xsl:copy</code> passing through unsanitized scripts, etc.</p>
            <p>Such an XSLT diagnostic could also report interesting findings (to code analysts) such as target tag set and namespace; mode usage; key usage; <code>xsl:apply-templates/@select</code> and so forth. (In XSLT 2.0, tunnel parameters, stylesheet variables and micropipelines.) Think of this less as a style guide or (de-)linter, more of an analytic crunch-out/synopsis.</p>
            <p>This can be done separately for XSLT 1.0 and XSLT 3.0, with XSLT 1.0 being an easier lift.</p>
            <p>The page can also cover <q>when you need to assess XSLT</q>, giving attention to the layered architecture and understanding potential threats in context. So you don't end up mistaking the risks or costs and thus losing opportunities.</p>
            <p>Once confirmed, these findings identify vulnerabilities. Those vulnerabilities can inform higher-level risk management about the application and its purpose.</p>
        </tldr>
    </project>
    <project status="planned">
        <name>Site Templating</name>
        <line>Static site generator, old school</line>
        <description>
            <p>A NodeJS CL tool to read an HTML file and deliver a transformed HTML file would be the basis for a static site generator in Node JS + XSLT. (This might have to be Saxon-based if only for XSLT outside the browser.)</p>
            <p>Then make an application of this for site templating.</p>
            <p>Deploy as either page setup or CI/CD (push) step (or both)?</p>
        </description>
    </project>
    <project status="planned">
        <name>Site Page Validator</name>
        <line>Even older school alternative supporting hand-crafted pages</line>
        <description>
            <p>Instead of templating, this application works by validating an HTML document to see how well it is templated. It could check for the presence of normative boilerplate and report when it is not found ... questions would be, how (and even when and whether) to maintain updates and checks for updates.</p>
            <p>This could be built as a helper application providing chunks of code for a user to copy out, when a page is found to be out of order.</p>
        </description>
    </project>
    <project status="planned">
        <name>OSCALize this site</name>
        <line>Eating our own cat fud</line>
        <description>
            <p>Using OSCAL for assurance as well as for maintaining security posture.</p>
        </description>
    </project>
    <project entry="json-mixer/json-reader.html" status="underway">
        <name>JSON Reader</name>
        <description>
            <p>Load JSON and spill it onto the page, as HTML.</p>
            <p>This is a very rudimentary application in place mainly for sake of testing the concept and stabilizing the (germ of a) code base that can carry it out.</p>
        </description>
    </project>
    <project status="planned">
        <name>Load and Run</name>
        <description>
            <p>Load your XSLT 1.0, then your XML. Inspired by D Carlisle.</p>
        </description>
    </project>
    <project status="planned">
        <name>CSV Tabulator</name>
        <description>
            <p>Rather than supporting people's dependencies on spreadsheets (like the Excel Drill), this application permits converting arbitrary CSV (such as might be exported by a spreadsheet) into a grid or table (configured by the user), perhaps then written out as OSCAL or other structured format ready for use in other applications?</p>
        </description>
    </project>
    <project status="planned">
        <name>Excel Drill</name>
        <description>
            <p>Load your Excel spreadsheet, pick your worksheet, map it into a table, save it.</p>
            <p>Save as HTML or OSCAL.</p>
            <p>Will require (un)zip functionality, resource wrapping (or other runtime interface with XSLT engine)</p>
        </description>
    </project>
    <project status="planned">
        <name>Word Dump</name>
        <description>
            <p>Why should the Excellent have all the fun? Drop a Word document onto the page and see rendered text. YMMV.</p>
            <p>Save as HTML, NISO BITS, or OSCAL?</p>
            <p>Essentially this is a mini-<a href="https://xsweet.org">XSweet</a> for a browser using only XSLT 1.0 (see how that goes)</p>
            <p>Also require (un)zip functionality, resource wrapping (or other runtime interface with XSLT engine) etc. etc.</p>
        </description>
    </project>
    <project status="planned">
        <name>Accessibility checklist &amp; diagnostic</name>
        <description>
            <p>A dynamic form application saving a checklist of accessibility issues in
                publishing.</p>
            <p>Can be hotwired to provide for automated checks of accessible documents. (HTML?)</p>
            <ul>
                <li><code>/*/@lang</code></li>
                <li>Correctly nested headers - no header may be directly followed by another more than one level deeper</li>
                <li>Only one header per section|div</li>
                <li>Tables?</li>
                <li><code>class</code> markup</li>
                <li>Labeling form fields</li>
                <li><code>alt-text</code> markup on images</li>
                <li>Figures (<code>&lt;figure></code>) and figure usage (captions etc); images
                    outside (nominal) figures</li>
                <li>Color check / preview? (links)</li>
                <li>Accessibility audits (links)</li>
            </ul>
        </description>
        <link href="https://www.w3.org/WAI/fundamentals/">W3C Web Accessibility
                Initiative</link>
    </project>
</projects>
